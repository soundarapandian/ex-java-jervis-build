@Grab(group='org.yaml', module='snakeyaml', version='1.19', transitive=false)
@Library('Jervis Global Library')

import net.gleske.jervis.remotes.GitHub


/**
  Gets GitHub API token from the global credential store.
 */

@NonCPS
String getGitHubAPIToken() {
    Jenkins.instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getCredentials().find {
        it.class.simpleName == 'StringCredentialsImpl' && it.id == 'github-token'
    }.with {
        if(it) {
            it.secret
        }
    } as String
}


/**
  Reads GitHub API and returns the .jervis.yml file via API instead of a
  workspace checkout.

  @return A list where the first item is jervis_yaml and the second item is a
          list of files in the root of the repository.
 */
@NonCPS
List getJervisMetaData(String project, String JERVIS_BRANCH) {
    String jervis_yaml
    def git_service = new GitHub()
    git_service.gh_token = getGitHubAPIToken()
    def folder_listing = git_service.getFolderListing(project, '/', JERVIS_BRANCH)
    if('.jervis.yml' in folder_listing) {
        jervis_yaml = git_service.getFile(project, '.jervis.yml', JERVIS_BRANCH)
    }
    else if('.travis.yml' in folder_listing) {
        jervis_yaml = git_service.getFile(project, '.travis.yml', JERVIS_BRANCH)
    }
    else {
        throw new FileNotFoundException('Cannot find .jervis.yml nor .travis.yml')
    }
    [jervis_yaml, folder_listing]
}


pipeline {
  agent { label 'language:java'}
  stages {
    // stage('Checkout') {
    //   steps {
    //       script {
    //         println '============================'
    //         println env.BRANCH_NAME
    //       }
    //       checkout([$class: 'GitSCM', branches: [[name: '**']], doGenerateSubmoduleConfigurations: false,
    //       extensions: [[$class: 'LocalBranch', localBranch: '**']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-user-and-token', url: 'https://github.com/soundarapandian/ex-java-jervis-build.git']]])
    //   }
    // }
    stage('Trigger aLine') {
        steps {
          script {
            // sh 'ls -a'
            // println env.WORKSPACE
            // def raw_yaml = (new File(".jervis.yml")).text
            // def yaml = new Yaml()
            // def jervis_yaml = yaml.load(raw_yaml)

            // sh "ls -a ${env.WORKSPACE}"
            // def build_gradle = readFile("${env.WORKSPACE}/build.gradle")
            // def raw_yaml = readFile("${env.WORKSPACE}/.jervis.yml")
            // def yaml = new Yaml()
            // def jervis_yaml = yaml.load(raw_yaml)

            // println '============================'
            // println jervis_yaml['language']
            // println jervis_yaml.dump()

            List jervis_metadata = getJervisMetaData("soundarapandian/ex-java-jervis-build".toString(), env.BRANCH_NAME)
            println jervis_metadata[0]
          }
        }
    }
  }
}
